# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: allvested
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: vested-api

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'us-east-1'}
  environment:
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN}
    IS_LOCAL_ENVIRONMENT: ${self:custom.IS_LOCAL_ENVIRONMENT}
    ENVIRONMENT: ${env:NODE_ENV}
    DEPLOYMENT_BUCKET: ${env:DEPLOYMENT_BUCKET}
    USERS_TABLE: ${self:resources.Resources.users.Properties.TableName}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # performance optimization
    DYNAMO_ENDPOINT: ${env:DYNAMO_ENDPOINT}
    SES_FROM_EMAIL: ${env:SES_FROM_EMAIL}
  logRetentionInDays: 14
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - ses:SendEmail
            - ses:SendRawEmail
          Resource:
            - !GetAtt users.Arn
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users-${self:provider.stage}"
            - !Join ['', [!GetAtt users.Arn, '/index/*']]  # if we add GSIs later
            - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"

plugins:
  - serverless-offline
  - serverless-plugin-typescript

functions:
  api:
    handler: handler.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
      - http:
          path: /
          method: ANY
          cors: true

resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: false
        SSESpecification:
          SSEEnabled: false
        Tags:
          - Key: Environment
            Value: ${self:provider.environment.ENVIRONMENT}

custom:
  IS_LOCAL_ENVIRONMENT: ${env:IS_LOCAL_ENVIRONMENT, 'true'}
  serverless-offline:
    httpPort: 3000

build:
  esbuild: false